# ngPost configuration file
#
#

CONF_VERSION = 3.2

## Lang for the app. Currently supported: EN, FR, ES, DE, NL, PT, ZH
lang = EN

## use Proxy (only Socks5 type!)
#PROXY_SOCKS5 = user:pass@192.168.1.1:5555

## destination folder for all your nzb
## if you don't put anything, the nzb will be generated in the folder of ngPost on Windows and in /tmp on Linux
## this will be overwritten if you use the option -o with the full path of the nzb
nzbPath  = /home/mb/Downloads/nzb

## Shutdown command to switch off the computer when ngPost is done with all its queued posting
## this should mainly used with the auto posting
## you could use whatever script instead (like to send a mail...)
#SHUTDOWN_CMD = shutdown /s /f /t 0  (Windows)
#SHUTDOWN_CMD = sudo -n /sbin/poweroff  (Linux, make sure poweroff has sudo rights without any password or change the command)
#SHUTDOWN_CMD = sudo -n shutdown -h now (MacOS, same make sure you've sudo rights)
SHUTDOWN_CMD = /usr/bin/sudo -n /sbin/poweroff

## upload the nzb to a specific URL
## only http, https or ftp (neither ftps or sftp are supported)
#NZB_UPLOAD_URL = ftp://user:pass@url_or_ip:21

## execute a command or script at the end of each post (see examples)
## you can use several post commands by defining several NZB_POST_CMD
## here is the list of the available placehoders
##   __nzbPath__          : full path of the written nzb file
##   __nzbName__          : name of the nzb without the extension (original source name)
##   __rarName__          : name of the archive files (in case of obfuscation)
##   __rarPass__          : archive password
##   __sizeInByte__       : size of the post (before yEnc encoding)
##   __groups__           : list of groups (comma separated)
##   __nbFiles__          : number of files in the post
##   __nbArticles__       : number of Articles
##   __nbArticlesFailed__ : number of Articles that failed to be posted
#
#NZB_POST_CMD = scp "__nzbPath__" myBox.com:~/nzbs/
#NZB_POST_CMD = zip "__nzbPath__.zip" "__nzbPath__"
#NZB_POST_CMD = ~/scripts/postNZB.sh "__nzbPath__" "__groups__" __rarName__ __rarPass__ __sizeInByte__ __nbFiles__ __nbArticles__ __nbArticlesFailed__
#NZB_POST_CMD = mysql -h localhost -D myDB -u myUser -pmyPass-e "INSERT INTO POST (release, rarName, rarPass, size) VALUES('__nzbName__', '__rarName__', '__rarPass__', '__sizeInByte__')"
#NZB_POST_CMD = cmd.exe /C move "__nzbPath__" "C:\ngPost\nzb\__nzbName__{{__rarPass__}}.nzb"
#NZB_POST_CMD = curl -X POST -F "file=@__nzbPath__" -F "api=12345" -F "cat=45" -F "private=no" https://usenet.com/post-api
NZB_POST_CMD = echo "NZB_POST_CMD echo: <release: __nzbName__> <rarName: __rarName__> <rarPass: __rarPass__> <path: __nzbPath__> <groups: __groups__> <size: __sizeInByte__B> <nbFiles: __nbFiles__> <nbArticles: __nbArticles__> <failed: __nbArticlesFailed__>"

## nzb files are normally all created in nzbPath
## but using this option, the nzb of each monitoring folder will be stored in their own folder (created in nzbPath)
#MONITOR_NZB_FOLDERS = true

## for monitoring, extension file filter for new incoming files (coma separated, no dot)
#MONITOR_EXTENSIONS = mkv,mp4,avi,zip,tar,gz,iso

## for monitoring, ignore new incoming folders
#MONITOR_IGNORE_DIR = true
## for monitoring, delay to check the size of an incoming file/folder to make sure it is fully arrived before posting it
## must be between 1sec and 120sec (otherwise default: 1sec)
MONITOR_SEC_DELAY_SCAN = 1


## Default folder to open to select files from the HMI
inputDir = /home/mb/Downloads

## History posting file
## each succesful post will append a line with the date, the file name, the archive name, the password...
POST_HISTORY = /home/mb/Downloads/nzb/ngPost_history.csv

## Character used to separate fields in the history posting file
#FIELD_SEPARATOR = ;

GROUPS   = alt.binaries.xylo,alt.binaries.superman,alt.binaries.paxer

## If you give several Groups (comma separated) you've 3 policies for posting:
##    ALL       : everything is posted on ALL the Groups
##    EACH_POST : each Post will be posted on a random Group from the list
##    EACH_FILE : each File will be posted on a random Group from the list
GROUP_POLICY = EACH_POST

## uncomment the next line if you want a fixed uploader email (in the nzb and in the header of each articles)
## if you let it commented, we'll generate ONE random email for all the posts of the session
#FROM = nzg0H8yBKVhmD@ngPost.com

## Generate new random poster for each post (--auto or --monitor)
## if this option is set the FROM email just above will be ignored
GEN_FROM = true


## uncomment the next line to limit the number of threads,  (by default it'll use the number of cores)
## all the connections are spread equally on those posting threads
thread  =  8


## How to display progressbar in command line: NONE, BAR, FILES
#DISP_Progress = BAR
DISP_Progress = FILES


## suffix of the msg_id for all the articles (cf nzb file)
#msg_id  =  ngPost

## article size (default 700k)
article_size = 716800

## number of retry to post an Article in case of failure (probably due to an already existing msg-id)
retry = 5


## uncomment the following line to obfuscate the subjects of each Article
## /!\ CAREFUL you won't find your post if you lose the nzb file /!\
#obfuscate = article

## remove accents and special characters from the nzb file names
NZB_RM_ACCENTS = true

## close Quick Post Tabs when posted successfully (for the GUI)
#AUTO_CLOSE_TABS = true


## Time to wait (seconds) before trying to resume a Post automatically in case of loss of Network (min: 30)
RESUME_WAIT = 30

## By default, ngPost tries to resume a Post if the network is down.
## it won't stop trying until the network is back and the post is finished properly
## you can disable this feature and thus stop a post when you loose the network
#NO_RESUME_AUTO = true

## if there is no activity on a connection it will be closed and restarted
## The duration is in second, default: 30, min: 5
SOCK_TIMEOUT = 30

## when several posts are queued, prepare the packing of the next post while uploading the current one
PREPARE_PACKING = true

## save the logs in a file (to debug potential crashes)
## ~/ngPost.log on Linux and MacOS, in the executable folder for Windows
## The log is overwritten each time ngPost is launched
## => after a crash, please SAVE the log before relaunching ngPost and
## plz post it on github as an issue https://github.com/mbruel/ngPost/issues
LOG_IN_FILE = true




##############################################################
##           Compression and par2 section                   ##
##############################################################

## Shortcut for automatic packing for both GUI and CMD using --pack
## coma separated list using the keywords COMPRESS, GEN_NAME, GEN_PASS and GEN_PAR2
## For Auto posting and Monitoring if you don't use COMPRESS you need GEN_PAR2
#PACK = COMPRESS, GEN_NAME, GEN_PASS, GEN_PAR2
#PACK = GEN_PAR2
PACK = COMPRESS, GEN_PASS, GEN_PAR2

## use the same Password for all your Posts using compression
#RAR_PASS = yourPassword

## temporary folder where the compressed files and par2 will be stored
## so we can post directly a compressed (obfuscated or not) archive of the selected files
## /!\ The directory MUST HAVE WRITE PERMISSION /!\
## this is set for Linux environment, Windows users MUST change it
TMP_DIR = /tmp

## temporary folder with size constraint, typically a tmpfs partition
## the size of a post multiply by TMP_RAM_RATIO must available on the disk
## otherwise ngPost will use TMP_DIR (with no check there)
## (uncomment and define TMP_RAM to activate the feature, make sure the path is writable)
#TMP_RAM = /mnt/ngPost_tmpfs

## Ratio used on the source files size to compensate the par2 generation
## min is 10% to be sure (so 1.1), max 2.0
TMP_RAM_RATIO = 1.1

## RAR or 7zip absolute file path (external application)
## /!\ The file MUST EXIST and BE EXECUTABLE /!\
## this is set for Linux environment, Windows users MUST change it
RAR_PATH = /usr/bin/rar

## RAR EXTRA options (the first 'a' and '-idp' will be added automatically)
## -hp will be added if you use a password with --gen_pass, --rar_pass or using the HMI
## -v42m will be added with --rar_size or using the HMI
## you could change the compression level, lock the archive, add redundancy...
#RAR_EXTRA = -ep1 -m0 -k -rr5p
#RAR_EXTRA = -mx0 -mhe=on   (for 7-zip)

## size in MB of the RAR volumes (0 by default meaning NO split)
## feel free to change the value or to comment the next line if you don't want to split the archive
RAR_SIZE = 7

## maximum number of archive volumes
## we'll use RAR_SIZE except if it genereates too many volumes
## in that case we'll update rar_size to be <size of post> / rar_max
RAR_MAX = 99

##  keep rar folder after posting (otherwise it is automatically deleted uppon successful post)
#KEEP_RAR = true

## Remove root (parent) folder when compressing Folders using RAR
#RAR_NO_ROOT_FOLDER = true

## par2 redundancy percentage (0 by default meaning NO par2 generation)
PAR2_PCT = 5

## par2 (or alternative) absolute file path
## this is only useful if you compile from source (as par2 is included on Windows and the AppImage)
## or if you wish to use an alternative to par2 (for exemple Multipar on Windows)
## (in that case, you may need to set also PAR2_ARGS)
PAR2_PATH = /home/mb/apps/bin/parpar
#PAR2_PATH = /usr/bin/par2
#PAR2_PATH = <your_path>/parpar

## fixed parameters for the par2 (or alternative) command
## you could for exemple use Multipar on Windows
#PAR2_ARGS = -s5M -r1n*0.6 -m2048M -p1l --progress stdout -q   (for parpar)
#PAR2_ARGS = c -l -m1024 -r8 -s768000                 (for par2cmdline)
#PAR2_ARGS = create /rr8 /lc40 /lr /rd2 /ss768000     (for Multipar)
PAR2_ARGS = -s1M -r1n*0.6 -m2048M -p1l -t7 --progress stdout -q
#Uukrul : PAR2_ARGS = -s5M -r1n*0.6 -m2048M -p1l -t4 --progress none -o 

## length of the random generated archive's file name
LENGTH_NAME = 33

## length of the random archive's passsword
LENGTH_PASS = 25




##############################################################
##                   servers section                        ##
##############################################################


[server]
host = news.newshosting.com
port = 443
ssl  = true
user = ngPostUser
pass = xxxxxxxxxx
connection = 7
#connection = 30
enabled = true
#enabled = false
nzbCheck = true
